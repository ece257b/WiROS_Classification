// Generated by gencpp from file csi_tools/SaveChannelRequest.msg
// DO NOT EDIT!


#ifndef CSI_TOOLS_MESSAGE_SAVECHANNELREQUEST_H
#define CSI_TOOLS_MESSAGE_SAVECHANNELREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace csi_tools
{
template <class ContainerAllocator>
struct SaveChannelRequest_
{
  typedef SaveChannelRequest_<ContainerAllocator> Type;

  SaveChannelRequest_()
    : filename()
    , num_channels(0)
    , mac()  {
    }
  SaveChannelRequest_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , num_channels(0)
    , mac(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _filename_type;
  _filename_type filename;

   typedef int32_t _num_channels_type;
  _num_channels_type num_channels;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mac_type;
  _mac_type mac;





  typedef boost::shared_ptr< ::csi_tools::SaveChannelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::csi_tools::SaveChannelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveChannelRequest_

typedef ::csi_tools::SaveChannelRequest_<std::allocator<void> > SaveChannelRequest;

typedef boost::shared_ptr< ::csi_tools::SaveChannelRequest > SaveChannelRequestPtr;
typedef boost::shared_ptr< ::csi_tools::SaveChannelRequest const> SaveChannelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::csi_tools::SaveChannelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::csi_tools::SaveChannelRequest_<ContainerAllocator1> & lhs, const ::csi_tools::SaveChannelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.filename == rhs.filename &&
    lhs.num_channels == rhs.num_channels &&
    lhs.mac == rhs.mac;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::csi_tools::SaveChannelRequest_<ContainerAllocator1> & lhs, const ::csi_tools::SaveChannelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace csi_tools

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::csi_tools::SaveChannelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::csi_tools::SaveChannelRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::csi_tools::SaveChannelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fd3566f0ecc10925bec095e47559ee15";
  }

  static const char* value(const ::csi_tools::SaveChannelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfd3566f0ecc10925ULL;
  static const uint64_t static_value2 = 0xbec095e47559ee15ULL;
};

template<class ContainerAllocator>
struct DataType< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "csi_tools/SaveChannelRequest";
  }

  static const char* value(const ::csi_tools::SaveChannelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#set these values to -1 to keep the current configuration\n"
"string filename\n"
"int32 num_channels\n"
"#leave as '' for no mac filter\n"
"string mac\n"
;
  }

  static const char* value(const ::csi_tools::SaveChannelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.num_channels);
      stream.next(m.mac);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveChannelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::csi_tools::SaveChannelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::csi_tools::SaveChannelRequest_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.filename);
    s << indent << "num_channels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_channels);
    s << indent << "mac: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mac);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CSI_TOOLS_MESSAGE_SAVECHANNELREQUEST_H
