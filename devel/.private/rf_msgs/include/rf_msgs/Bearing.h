// Generated by gencpp from file rf_msgs/Bearing.msg
// DO NOT EDIT!


#ifndef RF_MSGS_MESSAGE_BEARING_H
#define RF_MSGS_MESSAGE_BEARING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rf_msgs
{
template <class ContainerAllocator>
struct Bearing_
{
  typedef Bearing_<ContainerAllocator> Type;

  Bearing_()
    : header()
    , ap_id(0)
    , txmac()
    , n_tx(0)
    , n_rx(0)
    , seq(0)
    , rssi()
    , aoa()  {
    }
  Bearing_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , ap_id(0)
    , txmac(_alloc)
    , n_tx(0)
    , n_rx(0)
    , seq(0)
    , rssi(_alloc)
    , aoa(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _ap_id_type;
  _ap_id_type ap_id;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _txmac_type;
  _txmac_type txmac;

   typedef uint8_t _n_tx_type;
  _n_tx_type n_tx;

   typedef uint8_t _n_rx_type;
  _n_rx_type n_rx;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _rssi_type;
  _rssi_type rssi;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _aoa_type;
  _aoa_type aoa;





  typedef boost::shared_ptr< ::rf_msgs::Bearing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rf_msgs::Bearing_<ContainerAllocator> const> ConstPtr;

}; // struct Bearing_

typedef ::rf_msgs::Bearing_<std::allocator<void> > Bearing;

typedef boost::shared_ptr< ::rf_msgs::Bearing > BearingPtr;
typedef boost::shared_ptr< ::rf_msgs::Bearing const> BearingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rf_msgs::Bearing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rf_msgs::Bearing_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rf_msgs::Bearing_<ContainerAllocator1> & lhs, const ::rf_msgs::Bearing_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.ap_id == rhs.ap_id &&
    lhs.txmac == rhs.txmac &&
    lhs.n_tx == rhs.n_tx &&
    lhs.n_rx == rhs.n_rx &&
    lhs.seq == rhs.seq &&
    lhs.rssi == rhs.rssi &&
    lhs.aoa == rhs.aoa;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rf_msgs::Bearing_<ContainerAllocator1> & lhs, const ::rf_msgs::Bearing_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rf_msgs::Bearing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rf_msgs::Bearing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rf_msgs::Bearing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rf_msgs::Bearing_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rf_msgs::Bearing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rf_msgs::Bearing_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rf_msgs::Bearing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "967f0be24bd6e9e8f5c88973721bda70";
  }

  static const char* value(const ::rf_msgs::Bearing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x967f0be24bd6e9e8ULL;
  static const uint64_t static_value2 = 0xf5c88973721bda70ULL;
};

template<class ContainerAllocator>
struct DataType< ::rf_msgs::Bearing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rf_msgs/Bearing";
  }

  static const char* value(const ::rf_msgs::Bearing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rf_msgs::Bearing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message contains the angle of arrival measurements computed\n"
"# from a particular Wifi message. See Wifi.msg for more details\n"
"\n"
"Header header\n"
"\n"
"uint8 ap_id # AP identifier which collected the CSI data, sequential starting from 0, up to (total number of AP's - 1)\n"
"uint8[] txmac\n"
"uint8 n_tx # number of antennas on the transmitter antenna\n"
"uint8 n_rx # number of antennas on the receiver antenna\n"
"uint32 seq # packet number\n"
"\n"
"# RSSI of packet\n"
"int32[] rssi\n"
"\n"
"# angle of arrival values computed from n_tx antennas, this must be set\n"
"float64[] aoa # AoA in the coordinates of wifi radio\n"
"\n"
"# (CURRENTLY UNUSED) angle of arrival values computed at n_rx antennas\n"
"# float64[] aod\n"
"# float64[] aod_local\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rf_msgs::Bearing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rf_msgs::Bearing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.ap_id);
      stream.next(m.txmac);
      stream.next(m.n_tx);
      stream.next(m.n_rx);
      stream.next(m.seq);
      stream.next(m.rssi);
      stream.next(m.aoa);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bearing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rf_msgs::Bearing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rf_msgs::Bearing_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "ap_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ap_id);
    s << indent << "txmac[]" << std::endl;
    for (size_t i = 0; i < v.txmac.size(); ++i)
    {
      s << indent << "  txmac[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.txmac[i]);
    }
    s << indent << "n_tx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_tx);
    s << indent << "n_rx: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_rx);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "rssi[]" << std::endl;
    for (size_t i = 0; i < v.rssi.size(); ++i)
    {
      s << indent << "  rssi[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.rssi[i]);
    }
    s << indent << "aoa[]" << std::endl;
    for (size_t i = 0; i < v.aoa.size(); ++i)
    {
      s << indent << "  aoa[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.aoa[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RF_MSGS_MESSAGE_BEARING_H
