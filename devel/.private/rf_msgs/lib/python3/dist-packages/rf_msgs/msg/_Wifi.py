# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from rf_msgs/Wifi.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Wifi(genpy.Message):
  _md5sum = "c6b3816e58324f4c826cc5e2cd4f2f3b"
  _type = "rf_msgs/Wifi"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message accepts data from a WiFi access point for us in 
# robotics applications. The core data point is CSI, the channel
# state information. 

# CSI matrix is n_sub x n_rows x n_cols

Header header

uint8 ap_id # access point collecting the CSI
uint8[] txmac

uint8 chan # channel number

uint32 n_sub # number of subcarriers
uint8 n_rows # number of rows for the CSI matrix, generally the number of RX antenna
uint8 n_cols # number of columns, generally the number of TX antenna

# bandwidth of the signal, can be 20, 40 or 80 MHz, 
# the number of subcarriers are affected by this numbers
uint8 bw 

# the number of spatial channels. 
# Fewer than n_cols means the columns index greater than number of 
# spatial channels will be zero
uint8 mcs 

int32 rssi # received signal strength across "n_rows" antennas

uint32 fc # packet type byte
uint32 seq_num # packet number

float64[] csi_real # channel state information - real part
float64[] csi_imag # channel state information - complex part

string rx_id #flag of receiver

uint32 msg_id #realtime msg for debug

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','ap_id','txmac','chan','n_sub','n_rows','n_cols','bw','mcs','rssi','fc','seq_num','csi_real','csi_imag','rx_id','msg_id']
  _slot_types = ['std_msgs/Header','uint8','uint8[]','uint8','uint32','uint8','uint8','uint8','uint8','int32','uint32','uint32','float64[]','float64[]','string','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,ap_id,txmac,chan,n_sub,n_rows,n_cols,bw,mcs,rssi,fc,seq_num,csi_real,csi_imag,rx_id,msg_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Wifi, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.ap_id is None:
        self.ap_id = 0
      if self.txmac is None:
        self.txmac = b''
      if self.chan is None:
        self.chan = 0
      if self.n_sub is None:
        self.n_sub = 0
      if self.n_rows is None:
        self.n_rows = 0
      if self.n_cols is None:
        self.n_cols = 0
      if self.bw is None:
        self.bw = 0
      if self.mcs is None:
        self.mcs = 0
      if self.rssi is None:
        self.rssi = 0
      if self.fc is None:
        self.fc = 0
      if self.seq_num is None:
        self.seq_num = 0
      if self.csi_real is None:
        self.csi_real = []
      if self.csi_imag is None:
        self.csi_imag = []
      if self.rx_id is None:
        self.rx_id = ''
      if self.msg_id is None:
        self.msg_id = 0
    else:
      self.header = std_msgs.msg.Header()
      self.ap_id = 0
      self.txmac = b''
      self.chan = 0
      self.n_sub = 0
      self.n_rows = 0
      self.n_cols = 0
      self.bw = 0
      self.mcs = 0
      self.rssi = 0
      self.fc = 0
      self.seq_num = 0
      self.csi_real = []
      self.csi_imag = []
      self.rx_id = ''
      self.msg_id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ap_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.txmac
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI4Bi2I().pack(_x.chan, _x.n_sub, _x.n_rows, _x.n_cols, _x.bw, _x.mcs, _x.rssi, _x.fc, _x.seq_num))
      length = len(self.csi_real)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.csi_real))
      length = len(self.csi_imag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.csi_imag))
      _x = self.rx_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.msg_id
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.ap_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.txmac = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.chan, _x.n_sub, _x.n_rows, _x.n_cols, _x.bw, _x.mcs, _x.rssi, _x.fc, _x.seq_num,) = _get_struct_BI4Bi2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.csi_real = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.csi_imag = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rx_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rx_id = str[start:end]
      start = end
      end += 4
      (self.msg_id,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ap_id
      buff.write(_get_struct_B().pack(_x))
      _x = self.txmac
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI4Bi2I().pack(_x.chan, _x.n_sub, _x.n_rows, _x.n_cols, _x.bw, _x.mcs, _x.rssi, _x.fc, _x.seq_num))
      length = len(self.csi_real)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.csi_real.tostring())
      length = len(self.csi_imag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.csi_imag.tostring())
      _x = self.rx_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.msg_id
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.ap_id,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.txmac = str[start:end]
      _x = self
      start = end
      end += 21
      (_x.chan, _x.n_sub, _x.n_rows, _x.n_cols, _x.bw, _x.mcs, _x.rssi, _x.fc, _x.seq_num,) = _get_struct_BI4Bi2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.csi_real = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.csi_imag = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rx_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.rx_id = str[start:end]
      start = end
      end += 4
      (self.msg_id,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BI4Bi2I = None
def _get_struct_BI4Bi2I():
    global _struct_BI4Bi2I
    if _struct_BI4Bi2I is None:
        _struct_BI4Bi2I = struct.Struct("<BI4Bi2I")
    return _struct_BI4Bi2I
